{"ast":null,"code":"import { fetchConToken, fetchSinToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nimport Swal from \"sweetalert2\";\nexport const stratLogin = (email, password) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth', {\n      email,\n      password\n    }, \"POST\"); //el fetch retorna\n    // una respuesta por lo q utilizamos el await y la funcion tendra q ser async\n\n    const body = await resp.json(); //lo converitmos para aceedera la informacion\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token); //grabaremos el token en el local storage\n\n      localStorage.setItem('token-init-date', new Date().getTime()); //grabaremos la fecha completa del token\n      //en el local storage,la fecha en q se crea\n      //ya lo tenemos todoo de nuestro backend ahora tenemos q hacer el dispatch de nuestra accion\n\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.sms, 'error');\n    }\n  };\n};\nexport const startRegister = (email, password, name) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth/new', {\n      email,\n      password,\n      name\n    }, 'POST');\n    const body = await resp.json();\n    console.log(body);\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n      Swal.fire('Exito', \"Se ha registrado con existo\", 'success');\n    } else {\n      Swal.fire('Error', body.sms, 'error');\n    }\n  };\n};\nexport const startChecking = () => {\n  return async dispatch => {\n    const resp = await fetchConToken('auth/renew');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst login = user => ({\n  type: types.authLogin,\n  payload: user\n});\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish\n});","map":{"version":3,"names":["fetchConToken","fetchSinToken","types","Swal","stratLogin","email","password","dispatch","resp","body","json","ok","localStorage","setItem","token","Date","getTime","login","uid","name","fire","sms","startRegister","console","log","startChecking","checkingFinish","user","type","authLogin","payload","authCheckingFinish"],"sources":["/home/erielmejias99/files/project/web/React/Calendar/MERN-Calendar/src/actions/auth.js"],"sourcesContent":["import {fetchConToken, fetchSinToken} from \"../helpers/fetch\";\nimport {types} from \"../types/types\";\nimport Swal from \"sweetalert2\"\n\n\nexport const stratLogin = (email, password) => {\n    return async (dispatch) => {\n        const resp = await fetchSinToken('auth', {email, password}, \"POST\"); //el fetch retorna\n        // una respuesta por lo q utilizamos el await y la funcion tendra q ser async\n        const body = await resp.json();//lo converitmos para aceedera la informacion\n\n        if (body.ok) {\n            localStorage.setItem('token', body.token); //grabaremos el token en el local storage\n            localStorage.setItem('token-init-date', new Date().getTime()); //grabaremos la fecha completa del token\n            //en el local storage,la fecha en q se crea\n\n\n            //ya lo tenemos todoo de nuestro backend ahora tenemos q hacer el dispatch de nuestra accion\n            dispatch(login({\n                uid: body.uid,\n                name: body.name\n            }))\n\n        } else {\n            Swal.fire('Error', body.sms, 'error')\n        }\n\n\n    }\n}\n\nexport const startRegister = ( email, password, name ) => {\n    return async( dispatch ) => {\n\n        const resp = await fetchSinToken( 'auth/new', { email, password, name }, 'POST' );\n        const body = await resp.json();\n\n        console.log(body);\n\n        if( body.ok ) {\n            localStorage.setItem('token', body.token );\n            localStorage.setItem('token-init-date', new Date().getTime() );\n\n            dispatch( login({\n                uid: body.uid,\n                name: body.name\n            }) )\n\n            Swal.fire('Exito', \"Se ha registrado con existo\", 'success');\n\n        } else {\n            Swal.fire('Error', body.sms, 'error');\n        }\n\n\n    }\n}\n\nexport const startChecking = () => {\n    return async(dispatch) => {\n\n        const resp = await fetchConToken( 'auth/renew' );\n        const body = await resp.json();\n\n        if( body.ok ) {\n            localStorage.setItem('token', body.token );\n            localStorage.setItem('token-init-date', new Date().getTime() );\n\n            dispatch( login({\n                uid: body.uid,\n                name: body.name\n            }) )\n        } else {\n            dispatch( checkingFinish() );\n        }\n    }\n}\n\nconst login = ( user ) => ({\n    type: types.authLogin,\n    payload: user\n});\n\nconst checkingFinish = () => ({ type: types.authCheckingFinish });\n"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,aAAvB,QAA2C,kBAA3C;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAGA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EAC3C,OAAO,MAAOC,QAAP,IAAoB;IACvB,MAAMC,IAAI,GAAG,MAAMP,aAAa,CAAC,MAAD,EAAS;MAACI,KAAD;MAAQC;IAAR,CAAT,EAA4B,MAA5B,CAAhC,CADuB,CAC8C;IACrE;;IACA,MAAMG,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB,CAHuB,CAGQ;;IAE/B,IAAID,IAAI,CAACE,EAAT,EAAa;MACTC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,KAAnC,EADS,CACkC;;MAC3CF,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAIE,IAAJ,GAAWC,OAAX,EAAxC,EAFS,CAEsD;MAC/D;MAGA;;MACAT,QAAQ,CAACU,KAAK,CAAC;QACXC,GAAG,EAAET,IAAI,CAACS,GADC;QAEXC,IAAI,EAAEV,IAAI,CAACU;MAFA,CAAD,CAAN,CAAR;IAKH,CAZD,MAYO;MACHhB,IAAI,CAACiB,IAAL,CAAU,OAAV,EAAmBX,IAAI,CAACY,GAAxB,EAA6B,OAA7B;IACH;EAGJ,CAtBD;AAuBH,CAxBM;AA0BP,OAAO,MAAMC,aAAa,GAAG,CAAEjB,KAAF,EAASC,QAAT,EAAmBa,IAAnB,KAA6B;EACtD,OAAO,MAAOZ,QAAP,IAAqB;IAExB,MAAMC,IAAI,GAAG,MAAMP,aAAa,CAAE,UAAF,EAAc;MAAEI,KAAF;MAASC,QAAT;MAAmBa;IAAnB,CAAd,EAAyC,MAAzC,CAAhC;IACA,MAAMV,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;IAEAa,OAAO,CAACC,GAAR,CAAYf,IAAZ;;IAEA,IAAIA,IAAI,CAACE,EAAT,EAAc;MACVC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,KAAnC;MACAF,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAIE,IAAJ,GAAWC,OAAX,EAAxC;MAEAT,QAAQ,CAAEU,KAAK,CAAC;QACZC,GAAG,EAAET,IAAI,CAACS,GADE;QAEZC,IAAI,EAAEV,IAAI,CAACU;MAFC,CAAD,CAAP,CAAR;MAKAhB,IAAI,CAACiB,IAAL,CAAU,OAAV,EAAmB,6BAAnB,EAAkD,SAAlD;IAEH,CAXD,MAWO;MACHjB,IAAI,CAACiB,IAAL,CAAU,OAAV,EAAmBX,IAAI,CAACY,GAAxB,EAA6B,OAA7B;IACH;EAGJ,CAvBD;AAwBH,CAzBM;AA2BP,OAAO,MAAMI,aAAa,GAAG,MAAM;EAC/B,OAAO,MAAMlB,QAAN,IAAmB;IAEtB,MAAMC,IAAI,GAAG,MAAMR,aAAa,CAAE,YAAF,CAAhC;IACA,MAAMS,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;IAEA,IAAID,IAAI,CAACE,EAAT,EAAc;MACVC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,KAAnC;MACAF,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAIE,IAAJ,GAAWC,OAAX,EAAxC;MAEAT,QAAQ,CAAEU,KAAK,CAAC;QACZC,GAAG,EAAET,IAAI,CAACS,GADE;QAEZC,IAAI,EAAEV,IAAI,CAACU;MAFC,CAAD,CAAP,CAAR;IAIH,CARD,MAQO;MACHZ,QAAQ,CAAEmB,cAAc,EAAhB,CAAR;IACH;EACJ,CAhBD;AAiBH,CAlBM;;AAoBP,MAAMT,KAAK,GAAKU,IAAF,KAAa;EACvBC,IAAI,EAAE1B,KAAK,CAAC2B,SADW;EAEvBC,OAAO,EAAEH;AAFc,CAAb,CAAd;;AAKA,MAAMD,cAAc,GAAG,OAAO;EAAEE,IAAI,EAAE1B,KAAK,CAAC6B;AAAd,CAAP,CAAvB"},"metadata":{},"sourceType":"module"}