{"ast":null,"code":"import { types } from \"../types/types\";\nimport { auth, db, googleAuthProvider } from \"../firebase/firebaseConfig\";\nimport { signInWithPopup } from \"firebase/auth\";\nimport { addDoc, collection, getDocs, query, where } from \"firebase/firestore\"; //action para el login que resive lo necesario para logearse, devuelve el type que es d tipo login y\n// el payload que son los valores q necesitamos para ejecutar la accion\n\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const startGoogleLogin = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleAuthProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};","map":{"version":3,"names":["types","auth","db","googleAuthProvider","signInWithPopup","addDoc","collection","getDocs","query","where","login","uid","displayName","type","payload","startGoogleLogin","res","user","q","docs","length","name","authProvider","email","err","console","error","alert","message"],"sources":["/home/erielmejias99/files/project/web/React/Journal-App/src/actions/auth.js"],"sourcesContent":["import {types} from \"../types/types\";\nimport {auth, db, googleAuthProvider} from \"../firebase/firebaseConfig\";\nimport {signInWithPopup} from \"firebase/auth\";\nimport {addDoc, collection, getDocs, query, where} from \"firebase/firestore\";\n\n\n//action para el login que resive lo necesario para logearse, devuelve el type que es d tipo login y\n// el payload que son los valores q necesitamos para ejecutar la accion\nexport const login = ( uid, displayName) => ({\n    type: types.login,\n    payload: {\n        uid,\n        displayName\n    }\n})\n\n\nexport const startGoogleLogin = async () => {\n    try {\n        const res = await signInWithPopup(auth, googleAuthProvider);\n        const user = res.user;\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email,\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gBAApB;AACA,SAAQC,IAAR,EAAcC,EAAd,EAAkBC,kBAAlB,QAA2C,4BAA3C;AACA,SAAQC,eAAR,QAA8B,eAA9B;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,KAA5C,QAAwD,oBAAxD,C,CAGA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAG,CAAEC,GAAF,EAAOC,WAAP,MAAwB;EACzCC,IAAI,EAAEb,KAAK,CAACU,KAD6B;EAEzCI,OAAO,EAAE;IACLH,GADK;IAELC;EAFK;AAFgC,CAAxB,CAAd;AASP,OAAO,MAAMG,gBAAgB,GAAG,YAAY;EACxC,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMZ,eAAe,CAACH,IAAD,EAAOE,kBAAP,CAAjC;IACA,MAAMc,IAAI,GAAGD,GAAG,CAACC,IAAjB;IACA,MAAMC,CAAC,GAAGV,KAAK,CAACF,UAAU,CAACJ,EAAD,EAAK,OAAL,CAAX,EAA0BO,KAAK,CAAC,KAAD,EAAQ,IAAR,EAAcQ,IAAI,CAACN,GAAnB,CAA/B,CAAf;IACA,MAAMQ,IAAI,GAAG,MAAMZ,OAAO,CAACW,CAAD,CAA1B;;IACA,IAAIC,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAAzB,EAA4B;MACxB,MAAMf,MAAM,CAACC,UAAU,CAACJ,EAAD,EAAK,OAAL,CAAX,EAA0B;QAClCS,GAAG,EAAEM,IAAI,CAACN,GADwB;QAElCU,IAAI,EAAEJ,IAAI,CAACL,WAFuB;QAGlCU,YAAY,EAAE,QAHoB;QAIlCC,KAAK,EAAEN,IAAI,CAACM;MAJsB,CAA1B,CAAZ;IAMH;EACJ,CAbD,CAaE,OAAOC,GAAP,EAAY;IACVC,OAAO,CAACC,KAAR,CAAcF,GAAd;IACAG,KAAK,CAACH,GAAG,CAACI,OAAL,CAAL;EACH;AACJ,CAlBM"},"metadata":{},"sourceType":"module"}